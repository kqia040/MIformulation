# -*- coding: utf-8 -*-
"""
Created on Wed Jul 26 12:14:04 2017

@author: Kun
"""
import api
import numpy as np
import primal as primal
import newdualitseems as newdual
import changebasis
import random
import timeit


n = 17
V = api.makeVset(n)
R = V[0]
N = V[1]

E_B = [{((1, 2), None),
  ((1, 3), 4),
  ((1, 4), None),
  ((1, 5), None),
  ((1, 6), None),
  ((1, 7), None),
  ((1, 8), None),
  ((1, 9), 12),
  ((1, 10), None),
  ((1, 11), None),
  ((1, 12), 16),
  ((1, 13), None),
  ((1, 14), None),
  ((1, 15), None),
  ((1, 16), None),
  ((1, 17), None),
  ((2, 3), None),
  ((2, 4), 6),
  ((2, 5), None),
  ((2, 6), None),
  ((2, 7), 8),
  ((2, 8), 10),
  ((2, 9), None),
  ((2, 10), None),
  ((2, 11), None),
  ((2, 12), None),
  ((2, 13), None),
  ((2, 14), None),
  ((2, 15), None),
  ((2, 16), None),
  ((2, 17), None),
  ((3, 4), None),
  ((3, 5), None),
  ((3, 6), None),
  ((3, 7), None),
  ((3, 8), None),
  ((3, 9), None),
  ((3, 10), None),
  ((3, 11), None),
  ((3, 12), None),
  ((3, 13), None),
  ((3, 14), None),
  ((3, 15), None),
  ((3, 16), None),
  ((3, 17), None),
  ((4, 5), None),
  ((4, 6), None),
  ((4, 7), None),
  ((4, 8), None),
  ((4, 9), None),
  ((4, 10), 13),
  ((4, 11), None),
  ((4, 12), None),
  ((4, 13), None),
  ((4, 14), None),
  ((4, 15), None),
  ((4, 16), None),
  ((4, 17), None),
  ((5, 6), None),
  ((5, 7), None),
  ((5, 8), None),
  ((5, 9), None),
  ((5, 10), None),
  ((5, 11), None),
  ((5, 12), None),
  ((5, 13), None),
  ((5, 14), None),
  ((5, 15), None),
  ((5, 16), None),
  ((5, 17), None),
  ((6, 7), None),
  ((6, 8), None),
  ((6, 9), None),
  ((6, 10), None),
  ((6, 11), None),
  ((6, 12), None),
  ((6, 13), None),
  ((6, 14), None),
  ((6, 15), None),
  ((6, 16), None),
  ((6, 17), None),
  ((7, 8), None),
  ((7, 9), None),
  ((7, 10), None),
  ((7, 11), None),
  ((7, 12), None),
  ((7, 13), None),
  ((7, 14), None),
  ((7, 15), None),
  ((7, 16), None),
  ((7, 17), None),
  ((8, 9), None),
  ((8, 10), 14),
  ((8, 11), None),
  ((8, 12), None),
  ((8, 13), None),
  ((8, 14), None),
  ((8, 15), None),
  ((8, 16), None),
  ((8, 17), None),
  ((9, 10), None),
  ((9, 11), None),
  ((9, 12), None),
  ((9, 13), None),
  ((9, 14), None),
  ((9, 15), None),
  ((9, 16), None),
  ((9, 17), None),
  ((10, 11), None),
  ((10, 12), None),
  ((10, 13), None),
  ((10, 14), 15),
  ((10, 15), None),
  ((10, 16), None),
  ((10, 17), None),
  ((11, 12), None),
  ((11, 13), None),
  ((11, 14), None),
  ((11, 15), None),
  ((11, 16), None),
  ((11, 17), None),
  ((12, 13), None),
  ((12, 14), None),
  ((12, 15), None),
  ((12, 16), None),
  ((12, 17), None),
  ((13, 14), None),
  ((13, 15), None),
  ((13, 16), None),
  ((13, 17), None),
  ((14, 15), None),
  ((14, 16), None),
  ((14, 17), None),
  ((15, 16), None),
  ((15, 17), None),
  ((16, 17), None)},
 {((1, 2), 4),
  ((1, 2), 9),
  ((1, 6), 7),
  ((2, 3), 5),
  ((2, 3), 10),
  ((3, 4), 6),
  ((3, 7), 8),
  ((4, 5), 11),
  ((4, 8), 13),
  ((4, 9), 12),
  ((4, 10), 15),
  ((4, 12), 16),
  ((5, 7), 17),
  ((10, 13), 14)}]

d = {(1, 2): 633,
 (1, 3): 257,
 (1, 4): 91,
 (1, 5): 412,
 (1, 6): 150,
 (1, 7): 80,
 (1, 8): 134,
 (1, 9): 259,
 (1, 10): 505,
 (1, 11): 353,
 (1, 12): 324,
 (1, 13): 70,
 (1, 14): 211,
 (1, 15): 268,
 (1, 16): 246,
 (1, 17): 121,
 (2, 3): 390,
 (2, 4): 661,
 (2, 5): 227,
 (2, 6): 488,
 (2, 7): 572,
 (2, 8): 530,
 (2, 9): 555,
 (2, 10): 289,
 (2, 11): 282,
 (2, 12): 638,
 (2, 13): 567,
 (2, 14): 466,
 (2, 15): 420,
 (2, 16): 745,
 (2, 17): 518,
 (3, 4): 228,
 (3, 5): 169,
 (3, 6): 112,
 (3, 7): 196,
 (3, 8): 154,
 (3, 9): 372,
 (3, 10): 262,
 (3, 11): 110,
 (3, 12): 437,
 (3, 13): 191,
 (3, 14): 74,
 (3, 15): 53,
 (3, 16): 472,
 (3, 17): 142,
 (4, 5): 383,
 (4, 6): 120,
 (4, 7): 77,
 (4, 8): 105,
 (4, 9): 175,
 (4, 10): 476,
 (4, 11): 324,
 (4, 12): 240,
 (4, 13): 27,
 (4, 14): 182,
 (4, 15): 239,
 (4, 16): 237,
 (4, 17): 84,
 (5, 6): 267,
 (5, 7): 351,
 (5, 8): 309,
 (5, 9): 338,
 (5, 10): 196,
 (5, 11): 61,
 (5, 12): 421,
 (5, 13): 346,
 (5, 14): 243,
 (5, 15): 199,
 (5, 16): 528,
 (5, 17): 297,
 (6, 7): 63,
 (6, 8): 34,
 (6, 9): 264,
 (6, 10): 360,
 (6, 11): 208,
 (6, 12): 329,
 (6, 13): 83,
 (6, 14): 105,
 (6, 15): 123,
 (6, 16): 364,
 (6, 17): 35,
 (7, 8): 29,
 (7, 9): 232,
 (7, 10): 444,
 (7, 11): 292,
 (7, 12): 297,
 (7, 13): 47,
 (7, 14): 150,
 (7, 15): 207,
 (7, 16): 332,
 (7, 17): 29,
 (8, 9): 249,
 (8, 10): 402,
 (8, 11): 250,
 (8, 12): 314,
 (8, 13): 68,
 (8, 14): 108,
 (8, 15): 165,
 (8, 16): 349,
 (8, 17): 36,
 (9, 10): 495,
 (9, 11): 352,
 (9, 12): 95,
 (9, 13): 189,
 (9, 14): 326,
 (9, 15): 383,
 (9, 16): 202,
 (9, 17): 236,
 (10, 11): 154,
 (10, 12): 578,
 (10, 13): 439,
 (10, 14): 336,
 (10, 15): 240,
 (10, 16): 685,
 (10, 17): 390,
 (11, 12): 435,
 (11, 13): 287,
 (11, 14): 184,
 (11, 15): 140,
 (11, 16): 542,
 (11, 17): 238,
 (12, 13): 254,
 (12, 14): 391,
 (12, 15): 448,
 (12, 16): 157,
 (12, 17): 301,
 (13, 14): 145,
 (13, 15): 202,
 (13, 16): 289,
 (13, 17): 55,
 (14, 15): 57,
 (14, 16): 426,
 (14, 17): 96,
 (15, 16): 483,
 (15, 17): 153,
 (16, 17): 336}

E_T = E_B[0]
E_X = E_B[1]

r = R+N
c = list(E_T) + list(E_X)
M = np.zeros([len(R)+len(N),len(R)+len(N)])



for cc in range(len(c)):
    if c[cc][1] is None:
        ij = r.index(c[cc][0])
        M[ij][cc] = 1
    else:
        ij = r.index(c[cc][0])
        k = r.index(c[cc][1])
        ik = r.index((c[cc][0][0],c[cc][1]))
        jk = r.index((c[cc][0][1],c[cc][1]))
        M[ij][cc] = 1
        M[k][cc] = -1
        M[ik][cc] = -1
        M[jk][cc] = -1



b = np.zeros(len(r))
for i in range(len(r)):
    if r[i] in R:
        b[i] = -1
    elif r[i] == (1,2) or r[i] == (1,3) or r[i] == (2,3):
        b[i] = 1
    else:
        b[i] = 0

f = np.dot(np.linalg.inv(M),b)


M_R = np.zeros([len(E_X), len(E_X)], dtype='int')
E_X = list(E_X)
R = list(R)
for j in xrange(len(E_X)):
     i = R.index(E_X[j][1])
     M_R[i][j] = -1

MR_inv = np.linalg.inv(M_R)

b_R = dict.fromkeys(V[0], -1)
b_N = dict.fromkeys(V[1], 0)
b_N[(1,2)] = 1
b_N[(1,3)] = 1
b_N[(2,3)] = 1

b_bar = [b_R, b_N]

f_T, f_X, bbarN = primal.Primal(V, E_B, MR_inv, b_bar)

f_lp = {}
for i in range(len(f)):
    f_lp[c[i]] = f[i]
    
f_T.update(f_X)


f_TT = {}
for e in f_lp:
    if e in E_T:
        f_TT[e] = f_lp[e]

cost = 0        
for e in f_T:
    if e[1] is None:
        cost+=f_T[e]*d[e[0]]